.. _common issues:

Common issues & solutions
*************************

.. hint::
    If you find any issues that you cannot solve, please :ref:`get in touch through our help pages <help>`!


General solutions
=================
:ref:`Update PlanetMapper <updating_planetmapper>` to make sure you are running the latest version. It is possible that your bug may have been fixed in a recent update (you can also check the release notes for each version `on GitHub <https://github.com/ortk95/planetmapper/releases>`_).


Installation issues
===================
PlanetMapper requires a minimum Python version of 3.10, so if you get `ERROR: No matching distribution found for planetmapper` when trying to :ref:`install PlanetMapper <installation>`, it is likely that your python version is too old. You can check your Python version by running `python3 --version` in a terminal.


`ContentTooShortError` when downloading SPICE kernels
=====================================================
If you get a `ContentTooShortError` when trying to download SPICE kernels, it is likely that the download was interrupted before the file was fully downloaded (e.g. due to an unstable network connection). You can try re-downloading the kernel by running the download command again, or you can manually download the kernel from the `NAIF database <https://naif.jpl.nasa.gov/pub/naif/>`_ and place it in the correct directory.


SPICE Errors
============
If you have any errors caused reported by the SPICE system, it is likely that it doesn't have the correct SPICE kernels loaded. Therefore, make sure you have the :ref:`appropriate SPICE kernels downloaded <SPICE kernels>` to your computer and that you have set :ref:`the kernel directory<kernel directory>` correctly.

`SpiceNOLEAPSECONDS` Error
--------------------------
This error usually occurs when SPICE has not loaded *any* of your desired kernels. This may be because PlanetMapper is not looking in the correct directory for your kernels, so make sure you have set :ref:`the kernel directory<kernel directory>` correctly. You should also ensure you have :ref:`the required lsk and pck kernels downloaded correctly<required kernels>`.


`SpiceSPKINSUFFDATA` Error
--------------------------
This error usually occurs when SPICE has successfully loaded some kernels, but is missing ephemeris data for either the target body or the observer body. This may be because you have not downloaded the appropriate kernel containing the ephemeris data for this body. 

The error message should tell you which body is missing, and you can then identify the correct kernel to download by searching the `NAIF database <https://naif.jpl.nasa.gov/pub/naif/>`_. For example, if you are missing data for a planetary body, you can search the `generic_kernels/spk/satellites/aa_summaries.txt <https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/satellites/aa_summaries.txt>`_ file to identify which kernel need downloading.

.. hint::
    The kernels for the locations of planets are actually located in the `generic_kernels/spk/satellites <https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/satellites/>`_ directory, so even if you are only interested in the central planet, you will still need to download at least one kernel from the satellites directory. Search the `aa_summaries.txt <https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/satellites/aa_summaries.txt>`_ file for the planet(s) you are interested in to find the required kernel(s).


`NotFoundError` Error
---------------------
This error usually occurs when SPICE does not know the name of the body you are trying to observe, so may be caused by a typo.

Some :ref:`small body kernels <small body kernels>` generated by JPL horizons only contain the numeric ID codes for the body, so you may need to try using the numeric ID instead of the name (e.g. use `399` instead of `'earth'`). Alternatively, you could also :ref:`manually create an additional text kernel file <small body kernels>` to map the name of the body to its numeric ID.


`SpiceKERNELVARNOTFOUND` Error
------------------------------
This error occurs when SPICE tries to load a variable (e.g. defining a body's radii) that has not been defined in any kernels - this often happens with :ref:`small body kernels <small body kernels>` generated by JPL horizons. To fix this, you can :ref:`manually create an additional text kernel file <small body kernels>` containing the missing variables.


`SpiceNOFRAME` Error
--------------------
This error occurs when SPICE tries to load a reference frame that has not been defined in any kernels. To fix this, you can :ref:`manually create an additional text kernel file <small body kernels>` containing the missing reference frame definitions. PlanetMapper defaults to using the IAU reference frames for the target bodies (e.g. `IAU_JUPITER` for Jupiter), so if your target frame has a different name, you will need to explicitly specify it when creating :class:`planetmapper.Body` objects:

::

    body = planetmapper.Body('jupiter', frame='CUSTOM_JUPITER_FRAME')


Planets appear in the wrong position
====================================
This is likely to be due to an issue with your SPICE kernels or settings, possible fixes include...

- Make sure you are using the correct observer - e.g. a planet will appear in a different position from Earth and from JWST.
- Make sure you are using the correct observation time - times in PlanetMapper default to UTC, so make sure there are no time zone conversions needed.
- Make sure you have the latest version of any SPICE kernels, especially for any observers like HST or JWST which have have locations which are difficult to predict accurately.
- Make sure you are using the correct aberration correction.
- If you are using WCS information saved in the FITS header to automatically set the disc position, note that telescope pointing information (i.e. the WCS information) is never perfect. For example, due to the errors in guide star tracking, JWST pointing is only accurate to ~0.5".


.. _readonly arrays:

Read-only NumPy arrays
======================
Many PlanetMapper functions return read-only NumPy arrays (e.g. backplane methods like :func:`planetmapper.BodyXY.get_lon_img`). This prevents bugs caused by accidentally modifying cached data, but will cause an exception if you try to directly modify the array:

::

    ValueError: assignment destination is read-only

To convert a read-only NumPy array to a writeable array, you can use the `copy` method:

::

    lon_img = body.get_lon_img().copy()

This will create a copy of the array that you can safely modify, without affecting the original cached array.


Wireframe plots appear warped or distorted
==========================================
This is most likely to occur when using :func:`planetmapper.Body.plot_wireframe_radec` for a target located near the celestial pole (i.e. the target's declination is near 90° or -90°) or has a very large angular diameter (e.g. \>30°). The `plot can be distorted <https://github.com/ortk95/planetmapper/issues/323>`_ because spherical coordinates (like RA/Dec) are fundamentally impossible to represent perfectly in a 2D cartesian plot, with the distortion increasing at high declinations near the coordinate singularity at the celestial poles.

To fix this, you can use the :func:`planetmapper.Body.plot_wireframe_angular`, which by default uses a coordinate system centred on the target body, which minimises any distortion. The origin of the `angular` coordinate system can also be customised to be any point in the sky, for example, using `body.plot_wireframe_angular(origin_ra=0, origin_dec=90)` may be useful for plotting observations in the sky around the north celestial pole.

Plots may also appear distorted if using :func:`planetmapper.Body.plot_wireframe_angular` with a custom origin that is a large distance from the target body.


RA/Dec wireframe plots appear split into two halves
===================================================
If the target body is near RA=0°, the `wireframe plot may appear to be split into two halves <https://github.com/ortk95/planetmapper/issues/326#issuecomment-1934275816>`_, due to part of the body having RA values near 0° and part having RA values near 360°. This can be fixed by using `body.plot_wireframe_radec(use_shifted_meridian=True)`, which will plot the wireframe with RA coordinates between -180° and 180°, rather than the default of 0° to 360°.

.. _ssh errors:

SSH Errors
==========

`tkinter.TclError` when running graphical user interface over SSH
------------------------------------------------------------------
If you get an error like `_tkinter.TclError: no display name and no $DISPLAY environment variable` when trying to run the PlanetMapper graphical user interface over an SSH connection, it is likely that you have not enabled X11 forwarding in your SSH client, so you are unable to run graphical applications over the SSH connection.

To fix this, you can enable X11 forwarding by adding the `-X` option to your SSH command (e.g. `ssh -X user@example.com`), or add `ForwardX11 yes` to your SSH configuration file (usually located at `~/.ssh/config`).


`X Error` crash when running graphical user interface over SSH on macOS
-----------------------------------------------------------------------
Recent versions of XQuartz `appear to have a font handling bug <https://github.com/XQuartz/XQuartz/issues/216>`_ which can cause PlanetMapper to crash when running the user interface over an SSH connection using X11 forwarding: ::

    X Error of failed request:  BadValue (integer parameter out of range for operation)
      Major opcode of failed request:  45 (X_OpenFont)
      Value in failed request:  0x60027c
      Serial number of failed request:  3572
      Current serial number in output stream:  3573

As a temporary workaround, you can set the `PLANETMAPPER_USE_X11_FONT_BUGFIX` environment variable to `true` on your remote machine before running PlanetMapper if you experience this issue. You can add the following line to to your `.bash_profile` file to automatically set this environment variable: ::

    export PLANETMAPPER_USE_X11_FONT_BUGFIX=true

This tells the PlanetMapper user interface to replace certain characters with ASCII equivalents (e.g. `↑` is replaced with `^`) which seems to prevent the use of the fonts which cause XQuartz to crash. Note that this will make the user interface slightly more ugly, but should not affect functionality. If you are still having issues after trying this workaround, you can `add a comment to the GitHub issue <https://github.com/ortk95/planetmapper/issues/145>`_.


.. _matplotlib backend error:

Matplotlib backend `ImportError` when running the graphical user interface
==========================================================================
If you get an error like `ImportError: Cannot load backend 'tkagg' which requires the 'tk' interactive framework, as 'macosx' is currently running`, then Matplotlib is choosing a configuration that is incompatible with the PlanetMapper Graphical User Interface (GUI).

To fix this, you can manually set the `Matplotlib backend <https://matplotlib.org/stable/users/explain/figure/backends.html#selecting-a-backend>`_ to `tkagg` before creating any plots. This will ensure that Matplotlib uses a backend compatible with the PlanetMapper GUI, preventing any conflicts. You can do this by adding `matplotlib.use('tkagg')` to the top of your script, before creating any plots: ::

    import matplotlib
    import matplotlib.pyplot as plt
    import planetmapper

    matplotlib.use('tkagg')

    observation = planetmapper.Observation('data.fits')
    plt.imshow(observation.data[0])

    observation.run_gui()

See the `Matplotlib documentation <https://matplotlib.org/stable/users/explain/figure/backends.html#selecting-a-backend>`_ for more information on how to set the backend.

This issue occurs if your system defaults to a Matplotlib backend incompatible with the Tk-based PlanetMapper GUI and you create any Matplotlib plots before running the GUI in the same script. For example, this can happen on macOS systems, where the default `macosx` Matplotlib backend is not compatible with Tk. Normally, Matplotlib automatically attempts to choose a backend compatible with other libraries (like PlanetMapper), but Matplotlib's automatic selection is less reliable when creating plots then subsequently running other GUI code, so manually setting the backend with `matplotlib.use('tkagg')` can be necessary to ensure compatibility. See `this issue on the Matplotlib GitHub <https://github.com/matplotlib/matplotlib/issues/30388>`_ for more details.
